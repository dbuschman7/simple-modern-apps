package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/dbuschman7/smoke-test-service/graph/model"
)

// PostTestRun is the resolver for the postTestRun field.
func (r *mutationResolver) PostTestRun(ctx context.Context, run *model.TestRun) (bool, error) {
	lang := run.Language
	timePerRunMs := int32(run.TimePerRunMs)

	size := Upsert(run.Language, run.TimePerRunMs)
	fmt.Println(fmt.Sprintf("%v(%v) -> %v", lang, size, timePerRunMs))

	return true, nil
}

// Stats is the resolver for the stats field.
func (r *queryResolver) Stats(ctx context.Context) ([]*model.Stats, error) {
	languages := Languages()
	stats := make([]*model.Stats, len(languages))
	fmt.Println(fmt.Sprintf("Languages found: %v", languages))
	for i, lang := range languages {
		stats[i] = &model.Stats{
			Language: lang,
			Count:    Counts(lang),
			Average:  Average(lang),
		}
	}
	return stats, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
